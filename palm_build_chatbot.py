# -*- coding: utf-8 -*-
"""palm-build-chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pC6FVinB4im60UeV5CnJ58zMELS2SdOP

# About PaLM API

##### Copyright 2023 Google LLC.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""**Note**: At this time, the PaLM API is [only available in certain regions](https://developers.generativeai.google/available_regions).

# Chatbot w/ Bard API

## Setup Environment
"""

!pip install google-generativeai

import google.generativeai as palm
import os
import time

"""Grab an API Key

To get started, you'll need to [create an API key](https://developers.generativeai.google/tutorials/setup).
"""

palm.configure(api_key='AIzaSyCXpiohNJcnIh8D4pv6w-3uVy8Bxo0n048')

# Use the palm.list_models function to find available models:
models = [m for m in palm.list_models() if 'generateText' in m.supported_generation_methods]
model = models[0].name
print(model)

"""## Simplest Chatbot"""

prompt = """
You are an expert at solving word problems.

Solve the following problem:

I have three houses, each with three cats.
each cat owns 4 mittens, and a hat. Each mitten was
knit from 7m of yarn, each hat from 4m.
How much yarn was needed to make all the items?

Think about it step by step, and show your work.
"""

completion = palm.generate_text(
    model=model,
    prompt=prompt,
    temperature=0,
    # The maximum length of the response
    max_output_tokens=800,
)

print(completion.result)

# Set your input text
# prompt = "Why is the sky blue?"
prompt = "What is Quantum Computing? Explain like I'm 5."

completion = palm.generate_text(
    model=model,
    prompt=prompt,
    temperature=0,
    # The maximum length of the response
    max_output_tokens=200,
)

print(completion.result)

"""## Custom Chatbot

### Text Summarizer
"""

!pip install pypdf

from pypdf import PdfReader

from google.colab import drive
drive.mount('/content/drive')

directory = '/content/drive/MyDrive/1-Build-a-Chatbot/'
filename  = 'Attention-Is-All-You-Need.pdf'
# filename  = 'Art-of-War.pdf'

# creating a pdf file object
pdfFileObject = open(directory+filename, 'rb')
# creating a pdf reader object
pdfReader = PdfReader(pdfFileObject)
text=[]
summary=' '
#Storing the pages in a list
for i in range(0,len(pdfReader.pages)):
  # creating a page object
  pageObj = pdfReader.pages[i].extract_text()
  pageObj= pageObj.replace('\t\r','')
  pageObj= pageObj.replace('\xa0','')
  # extracting text from page
  text.append(pageObj)

# Merge multiple page - to reduce API Calls
def join_elements(lst, chars_per_element):
    new_lst = []
    for i in range(0, len(lst), chars_per_element):
        new_lst.append(''.join(lst[i:i+chars_per_element]))
    return new_lst

# Option to keep x elements per list element
new_text = join_elements(text, 3)

print(f"Original Pages = ",len(text))
print(f"Compressed Pages = ",len(new_text))

def get_completion(prompt):
  completion = palm.generate_text(model=model,
                                  prompt=prompt,
                                  temperature=0,
                                  # The maximum length of the response
                                  max_output_tokens=200,
                                  )
  return completion.result

summary = ""
for i in range(len(new_text)):
  prompt =f"""
  Your task is to act as a Text Summariser.
  I'll give you text from  pages of a book from beginning to end.
  And your job is to summarise text from these pages in less than 100 words.
  Don't be conversational. I need a plain 100 word answer.
  Text is shared below, delimited with triple backticks:
  ```{text[i]}```
  """
  try:
    response = get_completion(prompt)
  except:
    response = get_completion(prompt)
  print(response)
  summary= f"{summary} {response}\n\n"
  # result.append(response)
  time.sleep(19)  #You can query the model only 3 times in a minute for free, so we need to put some delay

with open(directory +'/palm_api_summary.txt',
          'w') as out:
  out.write(summary)

"""### Mock Interview"""

# Build a Chatbot that takes a Mock Interview
# For a specific Job Role, provided as input by End-User.

"""### AI Teacher"""

# This AI Teacher explains you topics in ELI-X level
# Where "X" is the age-appropriate learner level.

"""### Code Reviewer"""

# AI helper that generates comprehensive review that cover code
# Clarity, structure, efficiency, adherence
# To best practices, and maintainability.

"""# Chatbot w/ ChatGPT API"""

!pip install openai PyPDF2

import openai
import PyPDF2
import os
import pandas as pd
import time

filepath= "/content/drive/MyDrive/1-Build-a-Chatbot/Attention-Is-All-You-Need.pdf"
openai.api_key  = "Insert-Key-Here"

def get_completion(prompt, model="gpt-3.5-turbo"):
  messages = [{"role": "user", "content": prompt}]
  response = openai.ChatCompletion.create(
     model=model,
     messages=messages,
     temperature=0, # this is the degree of randomness of the model's output
  )
  return response.choices[0].message["content"]

prompt =f"""Who is the Prime Minister of India?"""
response = get_completion(prompt)
print(response)
time.sleep(19)  #You can query the model only 3 times in a minute for free, so we need to put some delay

# creating a pdf file object
pdfFileObject = open(filepath, 'rb')
# creating a pdf reader object
pdfReader = PyPDF2.PdfReader(pdfFileObject)
text=[]
summary=' '
#Storing the pages in a list
for i in range(0,len(pdfReader.pages)):
  # creating a page object
  pageObj = pdfReader.pages[i].extract_text()
  pageObj= pageObj.replace('\t\r','')
  pageObj= pageObj.replace('\xa0','')
  # extracting text from page
  text.append(pageObj)

for i in range(len(text)):
  prompt =f"""
  Your task is to extract relevant information from a text on the page of a book.
  This information will be used to create a book summary.
  Extract relevant information from the following text, which is delimited with triple backticks.\
  Be sure to preserve the important details.
  Text: ```{text[i]}```
  """
  try:
    response = get_completion(prompt)
  except:
    response = get_completion(prompt)
  print(response)
  summary= summary+' ' +response +'\n\n'
  result.append(response)
  time.sleep(19)  #You can query the model only 3 times in a minute for free, so we need to put some delay

with open('/content/drive/MyDrive/1-Build-a-Chatbot/summary.txt',
          'w') as out:
  out.write(summary)